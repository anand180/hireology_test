CONTROLLER:

1) show_candidates is really quite a large method. Generally, I try to make a method do exactly what it says it does and prefer to delegate to other methods to keep a method simply, succinct, and true to it’s name. I find this to be a more maintainable and comprehensible approach to coding.

2) I don’t leave comments in code for the most part. Source control, solid coding (including concise methods), good test coverage, and an eye for the future help to prevent the need for such things. This isn’t to say that I would never place a comment in code, but I consider their presence a possible smell.

3) Much of this logic appears to belong somewhere else. A controller shouldn’t doing all of those things. Ideally, a controller validates the data it receives, delegates the request to where it should go (in rails applications the logic is typically in the model, though I prefer the logic to be delegated to a service architecture of some kind and for models to serve the purpose of persistence) and return the result in the appropriate format. To that end, it would be possible to to ask a model (or service object of some sort) to fetch candidates and pass the sorting method requested to that model, then simply render the partial found at the end of the (very large) show_candidates method. That’s the kind of slim-fast this controller needs! (bad joke, I know). 

4) Just looking at the code here, there are lot’s of repetitive elements as well. These should be coded around regardless of where one relocates this logic. For example, if the current_user has permission to view candidates (seems like evaluating that stuff might belong in a filter, and probably should work completely differently as well!), the entire next several lines of code are really quite redundant. It could be rewritten to be less verbose and repetitive. For example, all that if..else business that is used (in the same way regardless of whether or not you have permission) can be completely eliminated with scopes that correspond to the sort on the model.

5) We depend on information coming into the controller to decide what sorting method we are going to use, but do not ever validate that the argument passed to the controller actually corresponds to a legitimate sorting strategy that is actually supported.

6) current_user.organization.candidates.all is repeated so many times! At least set local variable at the start and get rid of this repetitiveness.

7) Without additional code it’s somewhat tough to know for sure, but it seems that we are getting not just candidates, but also open jobs, yet this is the show candidates controller action and we are rendering the candidates_list partial. I suspect this means that the meaning of this controller action has gradually been overloaded, probably resulting in this quite messy code. This is, I suppose, another incarnation of my first point.

8) If you don’t have permission, apparently you don’t support an all candidates sorting strategy? Again, there isn’t any validation here. 

I’m sure that I could pick this apart forever. I have found that the longer you look at code the worse it gets! What’s really important though is making it better! To get things looking cleaner and following some of the principles mentioned above, I’d start with writing a solid set of tests on this controller if they didn’t already exist. Given the state of the code, I’d probably want to really understand the business requirements here because it is exceedingly unlikely that even if there were tests for this that they would be very comprehensive. Once you’ve got your coverage, you can begin moving things where they should be (again, much of the complexity here probably belongs somewhere else) and rewriting what is here. Much of the specifics depend on how the underlying models are organized, but the controller itself would likely be quite barren at the end. Ideally simply setting @candidates and @open_jobs by asking the models (or an intermediate action layer of some sort) for the data and passing it to the partial as needed.